// Code generated by lark suite oapi sdk gen
package v1

import (
	"github.com/larksuite/oapi-sdk-go/api"
	"github.com/larksuite/oapi-sdk-go/api/core/request"
	"github.com/larksuite/oapi-sdk-go/core"
	"github.com/larksuite/oapi-sdk-go/core/config"
)

type Service struct {
	conf                   *config.Config
	Documents              *DocumentService
	DocumentBlocks         *DocumentBlockService
	DocumentBlockChildrens *DocumentBlockChildrenService
}

func NewService(conf *config.Config) *Service {
	s := &Service{
		conf: conf,
	}
	s.Documents = newDocumentService(s)
	s.DocumentBlocks = newDocumentBlockService(s)
	s.DocumentBlockChildrens = newDocumentBlockChildrenService(s)
	return s
}

type DocumentService struct {
	service *Service
}

func newDocumentService(service *Service) *DocumentService {
	return &DocumentService{
		service: service,
	}
}

type DocumentBlockService struct {
	service *Service
}

func newDocumentBlockService(service *Service) *DocumentBlockService {
	return &DocumentBlockService{
		service: service,
	}
}

type DocumentBlockChildrenService struct {
	service *Service
}

func newDocumentBlockChildrenService(service *Service) *DocumentBlockChildrenService {
	return &DocumentBlockChildrenService{
		service: service,
	}
}

type DocumentCreateReqCall struct {
	ctx       *core.Context
	documents *DocumentService
	body      *DocumentCreateReqBody
	optFns    []request.OptFn
}

func (rc *DocumentCreateReqCall) Do() (*DocumentCreateResult, error) {
	var result = &DocumentCreateResult{}
	req := request.NewRequest("/open-apis/docx/v1/documents", "POST",
		[]request.AccessTokenType{request.AccessTokenTypeTenant, request.AccessTokenTypeUser}, rc.body, result, rc.optFns...)
	err := api.Send(rc.ctx, rc.documents.service.conf, req)
	return result, err
}

func (documents *DocumentService) Create(ctx *core.Context, body *DocumentCreateReqBody, optFns ...request.OptFn) *DocumentCreateReqCall {
	return &DocumentCreateReqCall{
		ctx:       ctx,
		documents: documents,
		body:      body,
		optFns:    optFns,
	}
}

type DocumentGetReqCall struct {
	ctx        *core.Context
	documents  *DocumentService
	pathParams map[string]interface{}
	optFns     []request.OptFn
}

func (rc *DocumentGetReqCall) SetDocumentId(documentId string) {
	rc.pathParams["document_id"] = documentId
}

func (rc *DocumentGetReqCall) Do() (*DocumentGetResult, error) {
	rc.optFns = append(rc.optFns, request.SetPathParams(rc.pathParams))
	var result = &DocumentGetResult{}
	req := request.NewRequest("/open-apis/docx/v1/documents/:document_id", "GET",
		[]request.AccessTokenType{request.AccessTokenTypeTenant, request.AccessTokenTypeUser}, nil, result, rc.optFns...)
	err := api.Send(rc.ctx, rc.documents.service.conf, req)
	return result, err
}

func (documents *DocumentService) Get(ctx *core.Context, optFns ...request.OptFn) *DocumentGetReqCall {
	return &DocumentGetReqCall{
		ctx:        ctx,
		documents:  documents,
		pathParams: map[string]interface{}{},
		optFns:     optFns,
	}
}

type DocumentRawContentReqCall struct {
	ctx         *core.Context
	documents   *DocumentService
	pathParams  map[string]interface{}
	queryParams map[string]interface{}
	optFns      []request.OptFn
}

func (rc *DocumentRawContentReqCall) SetDocumentId(documentId string) {
	rc.pathParams["document_id"] = documentId
}
func (rc *DocumentRawContentReqCall) SetLang(lang int) {
	rc.queryParams["lang"] = lang
}

func (rc *DocumentRawContentReqCall) Do() (*DocumentRawContentResult, error) {
	rc.optFns = append(rc.optFns, request.SetPathParams(rc.pathParams))
	rc.optFns = append(rc.optFns, request.SetQueryParams(rc.queryParams))
	var result = &DocumentRawContentResult{}
	req := request.NewRequest("/open-apis/docx/v1/documents/:document_id/raw_content", "GET",
		[]request.AccessTokenType{request.AccessTokenTypeTenant, request.AccessTokenTypeUser}, nil, result, rc.optFns...)
	err := api.Send(rc.ctx, rc.documents.service.conf, req)
	return result, err
}

func (documents *DocumentService) RawContent(ctx *core.Context, optFns ...request.OptFn) *DocumentRawContentReqCall {
	return &DocumentRawContentReqCall{
		ctx:         ctx,
		documents:   documents,
		pathParams:  map[string]interface{}{},
		queryParams: map[string]interface{}{},
		optFns:      optFns,
	}
}

type DocumentBlockBatchUpdateReqCall struct {
	ctx            *core.Context
	documentBlocks *DocumentBlockService
	body           *DocumentBlockBatchUpdateReqBody
	pathParams     map[string]interface{}
	queryParams    map[string]interface{}
	optFns         []request.OptFn
}

func (rc *DocumentBlockBatchUpdateReqCall) SetDocumentId(documentId string) {
	rc.pathParams["document_id"] = documentId
}
func (rc *DocumentBlockBatchUpdateReqCall) SetDocumentRevisionId(documentRevisionId int) {
	rc.queryParams["document_revision_id"] = documentRevisionId
}
func (rc *DocumentBlockBatchUpdateReqCall) SetClientToken(clientToken string) {
	rc.queryParams["client_token"] = clientToken
}
func (rc *DocumentBlockBatchUpdateReqCall) SetUserIdType(userIdType string) {
	rc.queryParams["user_id_type"] = userIdType
}

func (rc *DocumentBlockBatchUpdateReqCall) Do() (*DocumentBlockBatchUpdateResult, error) {
	rc.optFns = append(rc.optFns, request.SetPathParams(rc.pathParams))
	rc.optFns = append(rc.optFns, request.SetQueryParams(rc.queryParams))
	var result = &DocumentBlockBatchUpdateResult{}
	req := request.NewRequest("/open-apis/docx/v1/documents/:document_id/blocks/batch_update", "PATCH",
		[]request.AccessTokenType{request.AccessTokenTypeTenant, request.AccessTokenTypeUser}, rc.body, result, rc.optFns...)
	err := api.Send(rc.ctx, rc.documentBlocks.service.conf, req)
	return result, err
}

func (documentBlocks *DocumentBlockService) BatchUpdate(ctx *core.Context, body *DocumentBlockBatchUpdateReqBody, optFns ...request.OptFn) *DocumentBlockBatchUpdateReqCall {
	return &DocumentBlockBatchUpdateReqCall{
		ctx:            ctx,
		documentBlocks: documentBlocks,
		body:           body,
		pathParams:     map[string]interface{}{},
		queryParams:    map[string]interface{}{},
		optFns:         optFns,
	}
}

type DocumentBlockGetReqCall struct {
	ctx            *core.Context
	documentBlocks *DocumentBlockService
	pathParams     map[string]interface{}
	queryParams    map[string]interface{}
	optFns         []request.OptFn
}

func (rc *DocumentBlockGetReqCall) SetDocumentId(documentId string) {
	rc.pathParams["document_id"] = documentId
}
func (rc *DocumentBlockGetReqCall) SetBlockId(blockId string) {
	rc.pathParams["block_id"] = blockId
}
func (rc *DocumentBlockGetReqCall) SetDocumentRevisionId(documentRevisionId int) {
	rc.queryParams["document_revision_id"] = documentRevisionId
}
func (rc *DocumentBlockGetReqCall) SetUserIdType(userIdType string) {
	rc.queryParams["user_id_type"] = userIdType
}

func (rc *DocumentBlockGetReqCall) Do() (*DocumentBlockGetResult, error) {
	rc.optFns = append(rc.optFns, request.SetPathParams(rc.pathParams))
	rc.optFns = append(rc.optFns, request.SetQueryParams(rc.queryParams))
	var result = &DocumentBlockGetResult{}
	req := request.NewRequest("/open-apis/docx/v1/documents/:document_id/blocks/:block_id", "GET",
		[]request.AccessTokenType{request.AccessTokenTypeTenant, request.AccessTokenTypeUser}, nil, result, rc.optFns...)
	err := api.Send(rc.ctx, rc.documentBlocks.service.conf, req)
	return result, err
}

func (documentBlocks *DocumentBlockService) Get(ctx *core.Context, optFns ...request.OptFn) *DocumentBlockGetReqCall {
	return &DocumentBlockGetReqCall{
		ctx:            ctx,
		documentBlocks: documentBlocks,
		pathParams:     map[string]interface{}{},
		queryParams:    map[string]interface{}{},
		optFns:         optFns,
	}
}

type DocumentBlockListReqCall struct {
	ctx            *core.Context
	documentBlocks *DocumentBlockService
	pathParams     map[string]interface{}
	queryParams    map[string]interface{}
	optFns         []request.OptFn
}

func (rc *DocumentBlockListReqCall) SetDocumentId(documentId string) {
	rc.pathParams["document_id"] = documentId
}
func (rc *DocumentBlockListReqCall) SetPageSize(pageSize int) {
	rc.queryParams["page_size"] = pageSize
}
func (rc *DocumentBlockListReqCall) SetPageToken(pageToken string) {
	rc.queryParams["page_token"] = pageToken
}
func (rc *DocumentBlockListReqCall) SetDocumentRevisionId(documentRevisionId int) {
	rc.queryParams["document_revision_id"] = documentRevisionId
}
func (rc *DocumentBlockListReqCall) SetUserIdType(userIdType string) {
	rc.queryParams["user_id_type"] = userIdType
}

func (rc *DocumentBlockListReqCall) Do() (*DocumentBlockListResult, error) {
	rc.optFns = append(rc.optFns, request.SetPathParams(rc.pathParams))
	rc.optFns = append(rc.optFns, request.SetQueryParams(rc.queryParams))
	var result = &DocumentBlockListResult{}
	req := request.NewRequest("/open-apis/docx/v1/documents/:document_id/blocks", "GET",
		[]request.AccessTokenType{request.AccessTokenTypeTenant, request.AccessTokenTypeUser}, nil, result, rc.optFns...)
	err := api.Send(rc.ctx, rc.documentBlocks.service.conf, req)
	return result, err
}

func (documentBlocks *DocumentBlockService) List(ctx *core.Context, optFns ...request.OptFn) *DocumentBlockListReqCall {
	return &DocumentBlockListReqCall{
		ctx:            ctx,
		documentBlocks: documentBlocks,
		pathParams:     map[string]interface{}{},
		queryParams:    map[string]interface{}{},
		optFns:         optFns,
	}
}

type DocumentBlockPatchReqCall struct {
	ctx            *core.Context
	documentBlocks *DocumentBlockService
	body           *UpdateBlockRequest
	pathParams     map[string]interface{}
	queryParams    map[string]interface{}
	optFns         []request.OptFn
}

func (rc *DocumentBlockPatchReqCall) SetDocumentId(documentId string) {
	rc.pathParams["document_id"] = documentId
}
func (rc *DocumentBlockPatchReqCall) SetBlockId(blockId string) {
	rc.pathParams["block_id"] = blockId
}
func (rc *DocumentBlockPatchReqCall) SetDocumentRevisionId(documentRevisionId int) {
	rc.queryParams["document_revision_id"] = documentRevisionId
}
func (rc *DocumentBlockPatchReqCall) SetClientToken(clientToken string) {
	rc.queryParams["client_token"] = clientToken
}
func (rc *DocumentBlockPatchReqCall) SetUserIdType(userIdType string) {
	rc.queryParams["user_id_type"] = userIdType
}

func (rc *DocumentBlockPatchReqCall) Do() (*DocumentBlockPatchResult, error) {
	rc.optFns = append(rc.optFns, request.SetPathParams(rc.pathParams))
	rc.optFns = append(rc.optFns, request.SetQueryParams(rc.queryParams))
	var result = &DocumentBlockPatchResult{}
	req := request.NewRequest("/open-apis/docx/v1/documents/:document_id/blocks/:block_id", "PATCH",
		[]request.AccessTokenType{request.AccessTokenTypeTenant, request.AccessTokenTypeUser}, rc.body, result, rc.optFns...)
	err := api.Send(rc.ctx, rc.documentBlocks.service.conf, req)
	return result, err
}

func (documentBlocks *DocumentBlockService) Patch(ctx *core.Context, body *UpdateBlockRequest, optFns ...request.OptFn) *DocumentBlockPatchReqCall {
	return &DocumentBlockPatchReqCall{
		ctx:            ctx,
		documentBlocks: documentBlocks,
		body:           body,
		pathParams:     map[string]interface{}{},
		queryParams:    map[string]interface{}{},
		optFns:         optFns,
	}
}

type DocumentBlockChildrenBatchDeleteReqCall struct {
	ctx                    *core.Context
	documentBlockChildrens *DocumentBlockChildrenService
	body                   *DocumentBlockChildrenBatchDeleteReqBody
	pathParams             map[string]interface{}
	queryParams            map[string]interface{}
	optFns                 []request.OptFn
}

func (rc *DocumentBlockChildrenBatchDeleteReqCall) SetDocumentId(documentId string) {
	rc.pathParams["document_id"] = documentId
}
func (rc *DocumentBlockChildrenBatchDeleteReqCall) SetBlockId(blockId string) {
	rc.pathParams["block_id"] = blockId
}
func (rc *DocumentBlockChildrenBatchDeleteReqCall) SetDocumentRevisionId(documentRevisionId int) {
	rc.queryParams["document_revision_id"] = documentRevisionId
}
func (rc *DocumentBlockChildrenBatchDeleteReqCall) SetClientToken(clientToken string) {
	rc.queryParams["client_token"] = clientToken
}

func (rc *DocumentBlockChildrenBatchDeleteReqCall) Do() (*DocumentBlockChildrenBatchDeleteResult, error) {
	rc.optFns = append(rc.optFns, request.SetPathParams(rc.pathParams))
	rc.optFns = append(rc.optFns, request.SetQueryParams(rc.queryParams))
	var result = &DocumentBlockChildrenBatchDeleteResult{}
	req := request.NewRequest("/open-apis/docx/v1/documents/:document_id/blocks/:block_id/children/batch_delete", "DELETE",
		[]request.AccessTokenType{request.AccessTokenTypeTenant, request.AccessTokenTypeUser}, rc.body, result, rc.optFns...)
	err := api.Send(rc.ctx, rc.documentBlockChildrens.service.conf, req)
	return result, err
}

func (documentBlockChildrens *DocumentBlockChildrenService) BatchDelete(ctx *core.Context, body *DocumentBlockChildrenBatchDeleteReqBody, optFns ...request.OptFn) *DocumentBlockChildrenBatchDeleteReqCall {
	return &DocumentBlockChildrenBatchDeleteReqCall{
		ctx:                    ctx,
		documentBlockChildrens: documentBlockChildrens,
		body:                   body,
		pathParams:             map[string]interface{}{},
		queryParams:            map[string]interface{}{},
		optFns:                 optFns,
	}
}

type DocumentBlockChildrenCreateReqCall struct {
	ctx                    *core.Context
	documentBlockChildrens *DocumentBlockChildrenService
	body                   *DocumentBlockChildrenCreateReqBody
	pathParams             map[string]interface{}
	queryParams            map[string]interface{}
	optFns                 []request.OptFn
}

func (rc *DocumentBlockChildrenCreateReqCall) SetDocumentId(documentId string) {
	rc.pathParams["document_id"] = documentId
}
func (rc *DocumentBlockChildrenCreateReqCall) SetBlockId(blockId string) {
	rc.pathParams["block_id"] = blockId
}
func (rc *DocumentBlockChildrenCreateReqCall) SetDocumentRevisionId(documentRevisionId int) {
	rc.queryParams["document_revision_id"] = documentRevisionId
}
func (rc *DocumentBlockChildrenCreateReqCall) SetClientToken(clientToken string) {
	rc.queryParams["client_token"] = clientToken
}
func (rc *DocumentBlockChildrenCreateReqCall) SetUserIdType(userIdType string) {
	rc.queryParams["user_id_type"] = userIdType
}

func (rc *DocumentBlockChildrenCreateReqCall) Do() (*DocumentBlockChildrenCreateResult, error) {
	rc.optFns = append(rc.optFns, request.SetPathParams(rc.pathParams))
	rc.optFns = append(rc.optFns, request.SetQueryParams(rc.queryParams))
	var result = &DocumentBlockChildrenCreateResult{}
	req := request.NewRequest("/open-apis/docx/v1/documents/:document_id/blocks/:block_id/children", "POST",
		[]request.AccessTokenType{request.AccessTokenTypeTenant, request.AccessTokenTypeUser}, rc.body, result, rc.optFns...)
	err := api.Send(rc.ctx, rc.documentBlockChildrens.service.conf, req)
	return result, err
}

func (documentBlockChildrens *DocumentBlockChildrenService) Create(ctx *core.Context, body *DocumentBlockChildrenCreateReqBody, optFns ...request.OptFn) *DocumentBlockChildrenCreateReqCall {
	return &DocumentBlockChildrenCreateReqCall{
		ctx:                    ctx,
		documentBlockChildrens: documentBlockChildrens,
		body:                   body,
		pathParams:             map[string]interface{}{},
		queryParams:            map[string]interface{}{},
		optFns:                 optFns,
	}
}

type DocumentBlockChildrenGetReqCall struct {
	ctx                    *core.Context
	documentBlockChildrens *DocumentBlockChildrenService
	pathParams             map[string]interface{}
	queryParams            map[string]interface{}
	optFns                 []request.OptFn
}

func (rc *DocumentBlockChildrenGetReqCall) SetDocumentId(documentId string) {
	rc.pathParams["document_id"] = documentId
}
func (rc *DocumentBlockChildrenGetReqCall) SetBlockId(blockId string) {
	rc.pathParams["block_id"] = blockId
}
func (rc *DocumentBlockChildrenGetReqCall) SetDocumentRevisionId(documentRevisionId int) {
	rc.queryParams["document_revision_id"] = documentRevisionId
}
func (rc *DocumentBlockChildrenGetReqCall) SetPageToken(pageToken string) {
	rc.queryParams["page_token"] = pageToken
}
func (rc *DocumentBlockChildrenGetReqCall) SetPageSize(pageSize int) {
	rc.queryParams["page_size"] = pageSize
}
func (rc *DocumentBlockChildrenGetReqCall) SetUserIdType(userIdType string) {
	rc.queryParams["user_id_type"] = userIdType
}

func (rc *DocumentBlockChildrenGetReqCall) Do() (*DocumentBlockChildrenGetResult, error) {
	rc.optFns = append(rc.optFns, request.SetPathParams(rc.pathParams))
	rc.optFns = append(rc.optFns, request.SetQueryParams(rc.queryParams))
	var result = &DocumentBlockChildrenGetResult{}
	req := request.NewRequest("/open-apis/docx/v1/documents/:document_id/blocks/:block_id/children", "GET",
		[]request.AccessTokenType{request.AccessTokenTypeTenant, request.AccessTokenTypeUser}, nil, result, rc.optFns...)
	err := api.Send(rc.ctx, rc.documentBlockChildrens.service.conf, req)
	return result, err
}

func (documentBlockChildrens *DocumentBlockChildrenService) Get(ctx *core.Context, optFns ...request.OptFn) *DocumentBlockChildrenGetReqCall {
	return &DocumentBlockChildrenGetReqCall{
		ctx:                    ctx,
		documentBlockChildrens: documentBlockChildrens,
		pathParams:             map[string]interface{}{},
		queryParams:            map[string]interface{}{},
		optFns:                 optFns,
	}
}
